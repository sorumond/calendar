{"version":3,"sources":["pop-up/pop-up.jsx","calendar/calendar.jsx","App.js","serviceWorker.ts","index.js"],"names":["PopUp","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","inherits","createClass","key","event","setState","target","_this2","react_default","a","createElement","className","type","placeholder","onChange","autoFocus","onClick","saveButton","cancelButton","React","Component","daysInMonth","date","Date","getFullYear","getMonth","getDate","monthName","tasks","Calendar","month","year","isModalOpened","openedDate","moveForward","movePrevious","currentMonth","openModal","task","push","title","calendarDays","body","startPosisiton","getDay","i","getCurrentDay","dateNumber","fullDate","concat","createCalendar","map","day","renderTasks","pop_up_PopUp","App","calendar_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a29fc063.chunk.js","sourcesContent":["import React from 'react';\r\nimport './pop-up.css';\r\n\r\nexport class PopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value: ''};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (<div className={'pop-up__wrapper'}>\r\n            <div className=\"pop-up\">\r\n                <div className=\"pop-up__upper\"><h2 className=\"pop-up__title\">Введите задачу</h2>\r\n                    <input type=\"text\" className=\"pop-up__description\" placeholder=\"Задача\"\r\n                           value={this.state.value}\r\n                           onChange={this.handleChange}\r\n                           autoFocus={true}/>\r\n                </div>\r\n                <div className=\"pop-up__buttons\">\r\n                    <input type=\"button\" className=\"pop-up__button pop-up__button-save close\" value=\"Сохранить\"\r\n                           onClick={() => {\r\n                               this.props.saveButton(this.state.value)\r\n                           }}/>\r\n                    <input type=\"button\" className=\"pop-up__button pop-up__button-cancel close\" value=\"Отменить\"\r\n                           onClick={this.props.cancelButton}/>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    };\r\n}\r\n","import React from 'react';\r\nimport './calendar.css';\r\nimport '../pop-up/pop-up.css';\r\nimport {PopUp} from \"../pop-up/pop-up\";\r\n\r\nconst daysInMonth = function (date) {\r\n    return 32 - new Date(date.getFullYear(), date.getMonth(), 32).getDate();\r\n};\r\n\r\nlet monthName = [\"Січень\", \"Лютий\", \"Березнь\", \"Квітень\", \"Травень\", \"Червень\", \"Липень\", \"Серпень\", \"Вересень\", \"Жовтень\", \"Листопад\", \"Грудень\"];\r\n\r\nfunction createCalendar(year, month) {\r\n    let body = [];\r\n    let date = new Date(year, month);\r\n    let startPosisiton = 0;\r\n    if (date.getDay() === 0) {\r\n        startPosisiton = 7;\r\n    } else {\r\n        startPosisiton = date.getDay();\r\n    }\r\n    for (let i = 1; i < startPosisiton; i++) {\r\n        body.push('');\r\n    }\r\n    for (let i = 1; i <= daysInMonth(date); i++) {\r\n        let getCurrentDay = new Date(year, month, i);\r\n        let date = {\r\n            dateNumber: i,\r\n            fullDate: `${getCurrentDay.getDate()}.${getCurrentDay.getMonth()}.${getCurrentDay.getFullYear()}`\r\n        };\r\n        body.push(date);\r\n    }\r\n    for (let i = daysInMonth(date) + startPosisiton - 1; i % 7; i++) {\r\n        body.push('');\r\n    }\r\n    return body;\r\n}\r\n\r\nlet tasks = {};\r\n\r\nfunction renderTasks(date) {\r\n    let renderTask;\r\n    if (tasks[date]) {\r\n        renderTask = tasks[date].map((task) => {\r\n            return <li className={'calendar__task'}>{task.title}</li>\r\n        })\r\n    } else {\r\n        return\r\n    }\r\n    return renderTask;\r\n}\r\n\r\nexport class Calendar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            month: new Date().getMonth(),\r\n            year: new Date().getFullYear(),\r\n            isModalOpened: false,\r\n            openedDate: null,\r\n        };\r\n\r\n        this.moveForward = this.moveForward.bind(this);\r\n        this.movePrevious = this.movePrevious.bind(this);\r\n        this.currentMonth = this.currentMonth.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.cancelButton = this.cancelButton.bind(this);\r\n        this.saveButton = this.saveButton.bind(this);\r\n    };\r\n\r\n    openModal(openedDate) {\r\n        this.setState(state => ({\r\n            isModalOpened: true,\r\n            openedDate: openedDate,\r\n        }));\r\n    }\r\n\r\n    saveButton(task) {\r\n        this.setState(state => ({isModalOpened: false}));\r\n\r\n\r\n        if (task !== '') {\r\n            if (tasks[this.state.openedDate]) {\r\n                tasks[this.state.openedDate].push({title: task});\r\n            } else {\r\n                tasks[this.state.openedDate] = [];\r\n                tasks[this.state.openedDate].push({title: task});\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelButton() {\r\n        this.setState(state => ({isModalOpened: false}));\r\n    }\r\n\r\n    moveForward() {\r\n        this.setState(state => ({\r\n            month: state.month + 1\r\n        }));\r\n\r\n        if (this.state.month > 10) {\r\n            this.setState(state => ({\r\n                month: 0,\r\n                year: state.year + 1\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    movePrevious() {\r\n        this.setState(state => ({\r\n            month: state.month - 1\r\n        }));\r\n\r\n        if (this.state.month < 1) {\r\n            this.setState(state => ({\r\n                month: 11,\r\n                year: state.year - 1\r\n            }));\r\n        }\r\n    }\r\n\r\n    currentMonth() {\r\n        this.setState(state => ({\r\n            month: new Date().getMonth(),\r\n            year: new Date().getFullYear()\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const calendarDays = createCalendar(this.state.year, this.state.month);\r\n        return (<div className={'main'}>\r\n            <div className=\"calendar\">\r\n                <div className=\"calendar__buttons\">\r\n                    <button onClick={this.movePrevious}>Попередній місяць</button>\r\n                    <button onClick={this.currentMonth}>Сьогодні</button>\r\n                    <button onClick={this.moveForward}>Наступний місяць</button>\r\n                </div>\r\n                <span>Місяць: {monthName[this.state.month]}, Рік: {this.state.year}</span>\r\n                <div className=\"calendar__header\">\r\n                    <div className=\"calendar__dayOfWeek\">пн</div>\r\n                    <div className=\"calendar__dayOfWeek\">вт</div>\r\n                    <div className=\"calendar__dayOfWeek\">ср</div>\r\n                    <div className=\"calendar__dayOfWeek\">чт</div>\r\n                    <div className=\"calendar__dayOfWeek\">пт</div>\r\n                    <div className=\"calendar__dayOfWeek\">сб</div>\r\n                    <div className=\"calendar__dayOfWeek\">нд</div>\r\n                </div>\r\n                <div className=\"calendar__body\">\r\n                    {calendarDays.map((day, i) => {\r\n                        return day ? <div className={'calendar__day'} key={i} onClick={() => {\r\n                            this.openModal(day.fullDate);\r\n                        }}>\r\n                            <div className={'calendar__date'}>{day.dateNumber}</div>\r\n                            <div className={'calendar__event'}><ol>\r\n                                {renderTasks(day.fullDate)}\r\n                            </ol></div>\r\n                        </div> : <div className={'calendar__day'}></div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            {this.state.isModalOpened ? <PopUp openModal={this.openModal}\r\n                                               cancelButton={this.cancelButton}\r\n                                               saveButton={this.saveButton}/> : null}\r\n        </div>)\r\n    };\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Calendar} from \"./calendar/calendar\";\r\n\r\nfunction App() {\r\n    return (\r\n            <Calendar/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}